#!/usr/bin/env python
from sys import argv

def target_char(c):
	if c < 26:
		return chr(ord('A') + c)
	if c < 52:
		return chr(ord('a') + c - 26)
	if c < 62:
		return chr(ord('0') + c - 52)
	if c == 62: return '+'
	if c == 63: return '/'

'''
# test
import string as S
assert ''.join(target_char(i) for i in range(64)) == S.ascii_uppercase + S.ascii_lowercase + S.digits + '+/'
'''

chunks = []
for i in argv[1].encode('utf-8'):
	chunks.extend([
		(i&0b11000000)>>6,
		(i&0b110000)>>4,
		(i&0b1100)>>2,
		i&0b11,
	])

def chunks_to_chars(chunks):
	'''
	[0b11, 0b10, 0b01] → 0b111001
	[0b11, 0b10] → [0b11, 0b10, None] → 0b1110_00, 0b1110_01, ...
	[None, 0b10, 0b01] → 0b00_1001, 0b01_1001, ...
	'''
	while len(chunks) < 3:
		chunks.append(None)

	# more compact representations
	if chunks == [0, None, None]: return '[A-P]'
	if chunks == [1, None, None]: return '[Q-Za-f]'
	if chunks == [2, None, None]: return '[g-v]'
	if chunks == [3, None, None]: return '[w-z0-9+/]'

	if chunks == [0, 0, None]: return '[A-D]'
	if chunks == [0, 1, None]: return '[E-H]'
	if chunks == [0, 2, None]: return '[I-L]'
	if chunks == [0, 3, None]: return '[M-P]'
	if chunks == [1, 0, None]: return '[Q-T]'
	if chunks == [1, 1, None]: return '[U-X]'
	if chunks == [1, 2, None]: return '[YZab]'
	if chunks == [1, 3, None]: return '[c-f]'
	if chunks == [2, 0, None]: return '[g-j]'
	if chunks == [2, 1, None]: return '[k-n]'
	if chunks == [2, 2, None]: return '[o-r]'
	if chunks == [2, 3, None]: return '[s-v]'
	if chunks == [3, 0, None]: return '[w-z]'
	if chunks == [3, 1, None]: return '[0-3]'
	if chunks == [3, 2, None]: return '[4-7]'
	if chunks == [3, 3, None]: return '[89+/]'

	xs, ys, zs = chunks
	xs = list(range(4)) if xs is None else [xs]
	ys = list(range(4)) if ys is None else [ys]
	zs = list(range(4)) if zs is None else [zs]
	variants = []
	for x in xs:
		for y in ys:
			for z in zs:
				variants.append(target_char((x<<4) | (y<<2) | z))
	if len(variants) == 1:
		v = variants[0]
		return '\\+' if v == '+' else v
	else:
		return f'[{"".join(variants)}]'

regex = []
# encoding starting at different positions
for chunks_off in [
	chunks[:],
	[None] + chunks[:],
	[None, None] + chunks[:],
]:
	encoded = []
	while chunks_off:
		char, chunks_off = chunks_off[:3], chunks_off[3:]
		encoded.append(chunks_to_chars(char))
	regex.append(''.join(encoded))

print('|'.join(regex))
